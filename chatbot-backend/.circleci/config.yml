version: 2
jobs:
  run_unit_tests:
    working_directory: ~/repo
    docker:
      - image: circleci/node:12
        environment:
          NODE_ENV: development
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Install Dependencies
          command: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: yarn test
      - store_test_results:
          path: test-results
  pre_build:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build application Docker image
          command: |
            docker build \
              --no-cache -f .docker/Dockerfile-prod \
              -t app .

  # Build dev environment for Singapore region
  sg_master_build:
    docker:
      - image: circleci/python:2.7-jessie
        environment:
          ENVIRONMENT: dev
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: sudo pip install awscli --upgrade
      - run:
          name: Setup AWS SDK
          command: |
            aws configure set region $AWS_REGION_SG
            $(aws ecr get-login --no-include-email --region $AWS_REGION_SG)
      - run:
          name: Build application Docker image
          command: |
            docker build --no-cache -f .docker/Dockerfile-test -t app .
            docker tag app $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION_SG.amazonaws.com/$SERVICE_NAME:$ENVIRONMENT-$CIRCLE_SHA1
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION_SG.amazonaws.com/$SERVICE_NAME:$ENVIRONMENT-$CIRCLE_SHA1

  # Deploy dev environment for Singapore region
  sg_deploy_to_dev:
    docker:
      - image: google/cloud-sdk:290.0.0
        environment:
          ENVIRONMENT: dev
          NODE_ENV: development
          CLUSTER_NAME: diqit-dev
          AWS_REGION: ap-southeast-1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            pip3 install awscli --upgrade
            apt-get install -qq -y gettext
      - run:
          name: Connect to eks dev cluster
          command: aws eks --region $AWS_REGION_SG update-kubeconfig --name $CLUSTER_NAME
      - run:
          name: Deploy to Dev environment
          command: |
            envsubst < .deployment/sg/deployment.dev.yml > output.yml | kubectl apply -f output.yml --record
            kubectl rollout status deployment/${SERVICE_NAME} -n application
  # Build qa environment for Singapore region
  sg_qa_build:
    docker:
      - image: circleci/python:2.7-jessie
        environment:
          ENVIRONMENT: prod
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Bypass by now
          command: echo "bypass"

  # Deploy qa environment for Singapore region
  sg_qa_deploy:
    docker:
      - image: google/cloud-sdk:290.0.0
        environment:
          ENVIRONMENT: prod
          NODE_ENV: production
          CLUSTER_NAME: diqit-prod
          AWS_REGION: ap-southeast-1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Bypass by now
          command: echo "bypass"
  # Build prod environment for Singapore region
  sg_release_build:
    docker:
      - image: circleci/python:2.7-jessie
        environment:
          ENVIRONMENT: prod
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: sudo pip install awscli --upgrade
      - run:
          name: Setup AWS SDK
          command: |
            aws configure set region $AWS_REGION_SG
            $(aws ecr get-login --no-include-email --region $AWS_REGION_SG)
      - run:
          name: Build application Docker image
          command: |
            docker build --no-cache -f .docker/Dockerfile-prod -t app .
            docker tag app $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION_SG.amazonaws.com/$SERVICE_NAME:$ENVIRONMENT-$CIRCLE_SHA1
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION_SG.amazonaws.com/$SERVICE_NAME:$ENVIRONMENT-$CIRCLE_SHA1

  # Deploy prod environment for Singapore region
  sg_deploy_to_prod:
    docker:
      - image: google/cloud-sdk:290.0.0
        environment:
          ENVIRONMENT: prod
          NODE_ENV: production
          CLUSTER_NAME: diqit-prod
          AWS_REGION: ap-southeast-1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            pip3 install awscli --upgrade
            apt-get install -qq -y gettext
      - run:
          name: Connect to eks dev cluster
          command: aws eks --region $AWS_REGION_SG update-kubeconfig --name $CLUSTER_NAME
      - run:
          name: Deploy to Prod environment
          command: |
            envsubst < .deployment/sg/deployment.prod.yml > output.yml | kubectl apply -f output.yml --record
            kubectl rollout status deployment/${SERVICE_NAME} -n application

  # Build dev environment for Japan region
  jp_master_build:
    docker:
      - image: circleci/python:2.7-jessie
        environment:
          ENVIRONMENT: testjp
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: sudo pip install awscli --upgrade
      - run:
          name: Setup AWS SDK
          command: |
            aws configure set region $AWS_REGION_JP
            $(aws ecr get-login --no-include-email --region $AWS_REGION_JP)
      - run:
          name: Build application Docker image
          command: |
            docker build --no-cache -f .docker/Dockerfile-test -t app .
            docker tag app $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION_JP.amazonaws.com/$SERVICE_NAME:$ENVIRONMENT-$CIRCLE_SHA1
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION_JP.amazonaws.com/$SERVICE_NAME:$ENVIRONMENT-$CIRCLE_SHA1

  # Deploy dev environment for Japan region
  jp_deploy_to_dev:
    docker:
      - image: google/cloud-sdk:290.0.0
        environment:
          ENVIRONMENT: testjp
          NODE_ENV: development
          CLUSTER_NAME: phj-test
          AWS_REGION: ap-northeast-1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            pip3 install awscli --upgrade
            apt-get install -qq -y gettext
      - run:
          name: Connect to eks dev cluster
          command: aws eks --region $AWS_REGION_JP update-kubeconfig --name $CLUSTER_NAME
      - run:
          name: Deploy to Dev environment
          command: |
            envsubst < .deployment/jp/deployment.dev.yml > output.yml | kubectl apply -f output.yml --record
            kubectl rollout status deployment/${SERVICE_NAME} -n application

  # Build prod environment for Japan region
  jp_release_build:
    docker:
      - image: circleci/python:2.7-jessie
        environment:
          ENVIRONMENT: prodjp
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: sudo pip install awscli --upgrade
      - run:
          name: Setup AWS SDK
          command: |
            aws configure set region $AWS_REGION_JP
            $(aws ecr get-login --no-include-email --region $AWS_REGION_JP)
      - run:
          name: Build application Docker image
          command: |
            docker build --no-cache -f .docker/Dockerfile-prod -t app .
            docker tag app $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION_JP.amazonaws.com/$SERVICE_NAME:$ENVIRONMENT-$CIRCLE_SHA1
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION_JP.amazonaws.com/$SERVICE_NAME:$ENVIRONMENT-$CIRCLE_SHA1

  # Deploy prod environment for Japan region
  jp_deploy_to_prod:
    docker:
      - image: google/cloud-sdk:290.0.0
        environment:
          ENVIRONMENT: prodjp
          NODE_ENV: production
          CLUSTER_NAME: phj-prod
          AWS_REGION: ap-northeast-1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            pip3 install awscli --upgrade
            apt-get install -qq -y gettext
      - run:
          name: Connect to eks dev cluster
          command: aws eks --region $AWS_REGION_JP update-kubeconfig --name $CLUSTER_NAME
      - run:
          name: Deploy to Prod environment
          command: |
            envsubst < .deployment/jp/deployment.prod.yml > output.yml | kubectl apply -f output.yml --record
            kubectl rollout status deployment/${SERVICE_NAME} -n application
  # Build AA Dev environment
  aadev_build:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Authenticate gcloud SDK
          command: |
            echo $AADEV_SERVICE_ACCOUNT_KEY | base64 --decode --ignore-garbage > ${HOME}/gcp-key.json
            cat ${HOME}/gcp-key.json | docker login -u _json_key --password-stdin https://gcr.io
      - run:
          name: Tag build information
          command: |
            echo "ENVIRONMENT=aadev" >> .build
            echo "BUILD_TIMESTAMP=$(date +'%Y.%m.%d %H:%M:%S')" >> .build
            echo "CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM}" >> .build
      - run:
          name: Build application Docker image
          command: |
            docker build \
              --no-cache -f .docker/Dockerfile-prod \
              -t app .
            docker tag app gcr.io/${AADEV_GOOGLE_PROJECT_ID}/${SERVICE_NAME}:dev-$CIRCLE_SHA1
            docker push gcr.io/${AADEV_GOOGLE_PROJECT_ID}/${SERVICE_NAME}:dev-$CIRCLE_SHA1

  # Deploy AA Dev environment
  aadev_deploy:
    docker:
      - image: google/cloud-sdk:290.0.0
        environment:
          ENVIRONMENT: dev
          USR_ENV: development
          NAME_SPACE: ourfresh
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apt-get install -qq -y gettext
      - run:
          name: Get deployment file
          command: envsubst < .deployment/aa/deployment.dev.yml > output.yml
      - run:
          name: Connect and deploy from bastion host
          command: |
            echo $AADEV_SERVICE_ACCOUNT_KEY | base64 --decode --ignore-garbage > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            echo | gcloud beta compute scp "output.yml" ${BASTION_DEV}:~ --zone ${AADEV_GKE_ZONE} --tunnel-through-iap --project ${AADEV_GOOGLE_PROJECT_ID} --strict-host-key-checking=no
            echo '#!/bin/bash' > deploy.sh
            echo "gcloud beta compute ssh ${BASTION_DEV} --zone ${AADEV_GKE_ZONE} --tunnel-through-iap --project ${AADEV_GOOGLE_PROJECT_ID} --strict-host-key-checking=no <<'EOF'
                  gcloud container clusters get-credentials ${AADEV_GKE_CLUSTER_NAME} --zone ${AADEV_GKE_ZONE} --project ${AADEV_GOOGLE_PROJECT_ID}
                  kubectl apply -f output.yml --record
                  kubectl rollout status deployment/${SERVICE_NAME} -n ${NAME_SPACE}
                  rm -rf output.yml" >> deploy.sh
            echo "EOF" >> deploy.sh
            sh +x deploy.sh
  # Build AA Stag environment
  aastg_build:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Authenticate gcloud SDK
          command: |
            echo $AASTG_SERVICE_ACCOUNT_KEY | base64 --decode --ignore-garbage > ${HOME}/gcp-key.json
            cat ${HOME}/gcp-key.json | docker login -u _json_key --password-stdin https://gcr.io
      - run:
          name: Tag build information
          command: |
            echo "ENVIRONMENT=aastg" >> .build
            echo "BUILD_TIMESTAMP=$(date +'%Y.%m.%d %H:%M:%S')" >> .build
            echo "CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM}" >> .build
      - run:
          name: Build application Docker image
          command: |
            docker build \
              --no-cache -f .docker/Dockerfile-prod \
              -t app .
            docker tag app gcr.io/${AASTG_GOOGLE_PROJECT_ID}/${SERVICE_NAME}:stg-$CIRCLE_SHA1
            docker push gcr.io/${AASTG_GOOGLE_PROJECT_ID}/${SERVICE_NAME}:stg-$CIRCLE_SHA1

  # Deploy AA Stg environment
  aastg_deploy:
    docker:
      - image: google/cloud-sdk:290.0.0
        environment:
          ENVIRONMENT: stg
          USR_ENV: staging
          NAME_SPACE: ourfresh
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apt-get install -qq -y gettext
      - run:
          name: Get deployment file
          command: envsubst < .deployment/aa/deployment.stg.yml > output.yml
      - run:
          name: Connect and deploy from bastion host
          command: |
            echo $AASTG_SERVICE_ACCOUNT_KEY | base64 --decode --ignore-garbage > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            echo | gcloud beta compute scp "output.yml" ${BASTION_STG}:~ --zone ${AASTG_GKE_ZONE} --tunnel-through-iap --project ${AASTG_GOOGLE_PROJECT_ID} --strict-host-key-checking=no
            echo '#!/bin/bash' > deploy.sh
            echo "gcloud beta compute ssh ${BASTION_STG} --zone ${AASTG_GKE_ZONE} --tunnel-through-iap --project ${AASTG_GOOGLE_PROJECT_ID} --strict-host-key-checking=no <<'EOF'
              gcloud container clusters get-credentials ${AASTG_GKE_CLUSTER_NAME} --zone ${AASTG_GKE_ZONE} --project ${AASTG_GOOGLE_PROJECT_ID}
              kubectl apply -f output.yml --record
              kubectl rollout status deployment/${SERVICE_NAME} -n ${NAME_SPACE}
              rm -rf output.yml" >> deploy.sh
            echo "EOF" >> deploy.sh
            sh +x deploy.sh
  # Build AA PPD environment
  aappd_build:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Authenticate gcloud SDK
          command: |
            echo $AAPPD_SERVICE_ACCOUNT_KEY | base64 --decode --ignore-garbage > ${HOME}/gcp-key.json
            cat ${HOME}/gcp-key.json | docker login -u _json_key --password-stdin https://gcr.io
      - run:
          name: Tag build information
          command: |
            echo "ENVIRONMENT=aappd" >> .build
            echo "BUILD_TIMESTAMP=$(date +'%Y.%m.%d %H:%M:%S')" >> .build
            echo "CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM}" >> .build
      - run:
          name: Build application Docker image
          command: |
            docker build \
              --no-cache -f .docker/Dockerfile-prod \
              -t app .
            docker tag app gcr.io/${AAPPD_GOOGLE_PROJECT_ID}/${SERVICE_NAME}:ppd-$CIRCLE_SHA1
            docker push gcr.io/${AAPPD_GOOGLE_PROJECT_ID}/${SERVICE_NAME}:ppd-$CIRCLE_SHA1

  # Deploy AA PPD environment
  aappd_deploy:
    docker:
      - image: google/cloud-sdk:290.0.0
        environment:
          ENVIRONMENT: ppd
          USR_ENV: production
          NAME_SPACE: ourfresh
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apt-get install -qq -y gettext
      - run:
          name: Get deployment file
          command: envsubst < .deployment/aa/deployment.ppd.yml > output.yml
      - run:
          name: Connect and deploy from bastion host
          command: |
            echo $AAPPD_SERVICE_ACCOUNT_KEY | base64 --decode --ignore-garbage > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            echo | gcloud beta compute scp "output.yml" ${BASTION_PPD}:~ --zone ${AAPPD_GKE_ZONE} --tunnel-through-iap --project ${AAPPD_GOOGLE_PROJECT_ID} --strict-host-key-checking=no
            echo '#!/bin/bash' > deploy.sh
            echo "gcloud beta compute ssh ${BASTION_PPD} --zone ${AAPPD_GKE_ZONE} --tunnel-through-iap --project ${AAPPD_GOOGLE_PROJECT_ID} --strict-host-key-checking=no <<'EOF'
              gcloud container clusters get-credentials ${AAPPD_GKE_CLUSTER_NAME} --zone ${AAPPD_GKE_ZONE} --project ${AAPPD_GOOGLE_PROJECT_ID}
              kubectl apply -f output.yml --record
              kubectl rollout status deployment/${SERVICE_NAME} -n ${NAME_SPACE}
              rm -rf output.yml" >> deploy.sh
            echo "EOF" >> deploy.sh
            sh +x deploy.sh
  # Build AA PRD environment
  aaprd_build:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Authenticate gcloud SDK
          command: |
            echo $AAPRD_SERVICE_ACCOUNT_KEY | base64 --decode --ignore-garbage > ${HOME}/gcp-key.json
            cat ${HOME}/gcp-key.json | docker login -u _json_key --password-stdin https://gcr.io
      - run:
          name: Tag build information
          command: |
            echo "ENVIRONMENT=aaprd" >> .build
            echo "BUILD_TIMESTAMP=$(date +'%Y.%m.%d %H:%M:%S')" >> .build
            echo "CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM}" >> .build
      - run:
          name: Build application Docker image
          command: |
            docker build \
              --no-cache -f .docker/Dockerfile-prod \
              -t app .
            docker tag app gcr.io/${AAPRD_GOOGLE_PROJECT_ID}/${SERVICE_NAME}:prd-$CIRCLE_SHA1
            docker push gcr.io/${AAPRD_GOOGLE_PROJECT_ID}/${SERVICE_NAME}:prd-$CIRCLE_SHA1

  # Deploy AA PRD environment
  aaprd_deploy:
    docker:
      - image: google/cloud-sdk:290.0.0
        environment:
          ENVIRONMENT: prd
          USR_ENV: production
          NAME_SPACE: ourfresh
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apt-get install -qq -y gettext
      - run:
          name: Get deployment file
          command: envsubst < .deployment/aa/deployment.prd.yml > output.yml
      - run:
          name: Connect and deploy from bastion host
          command: |
            echo $AAPRD_SERVICE_ACCOUNT_KEY | base64 --decode --ignore-garbage > ${HOME}/gcp-key.json
            gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
            echo | gcloud beta compute scp "output.yml" ${BASTION_PRD}:~ --zone ${AAPRD_BASTION_ZONE} --tunnel-through-iap --project ${AAPRD_GOOGLE_PROJECT_ID} --strict-host-key-checking=no
            echo '#!/bin/bash' > deploy.sh
            echo "gcloud beta compute ssh ${BASTION_PRD} --zone ${AAPRD_BASTION_ZONE} --tunnel-through-iap --project ${AAPRD_GOOGLE_PROJECT_ID} --strict-host-key-checking=no <<'EOF'
              gcloud container clusters get-credentials ${AAPRD_GKE_CLUSTER_NAME} --zone ${AAPRD_GKE_ZONE} --project ${AAPRD_GOOGLE_PROJECT_ID}
              kubectl apply -f output.yml --record
              kubectl rollout status deployment/${SERVICE_NAME} -n ${NAME_SPACE}
              rm -rf output.yml" >> deploy.sh
            echo "EOF" >> deploy.sh
            sh +x deploy.sh
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - run_unit_tests
      - pre_build:
          filters:
            branches:
              ignore:
                - master
                - /release\/.*/
          requires:
            - run_unit_tests

      # workflow for Singapore
      - sg_master_build:
          filters:
            branches:
              only:
                - master
          requires:
            - run_unit_tests
      - sg_deploy_to_dev:
          filters:
            branches:
              only:
                - master
          requires:
            - sg_master_build
      # workflow for Singapore QA
      - sg_qa_build:
          filters:
            branches:
              only:
                - /release\/.*/
          requires:
            - run_unit_tests
      - sg_qa_deploy:
          filters:
            branches:
              only:
                - /release\/.*/
          requires:
            - sg_qa_build
      # workflow for Singapore Production
      - sg_approval_to_prod:
          type: approval
          requires:
            - sg_qa_deploy
      - sg_release_build:
          requires:
            - sg_approval_to_prod
      - sg_deploy_to_prod:
          requires:
            - sg_release_build

      # Workflow for Japan
      - jp_approval_to_test:
          type: approval
          requires:
            - sg_qa_deploy
      - jp_master_build:
          requires:
            - jp_approval_to_test
      - jp_deploy_to_dev:
          requires:
            - jp_master_build
      - jp_approval_to_prod:
          type: approval
          requires:
            - jp_deploy_to_dev
      - jp_release_build:
          requires:
            - jp_approval_to_prod
      - jp_deploy_to_prod:
          requires:
            - jp_release_build
      # Workflow for AA
      - aadev_approval:
          type: approval
          requires:
            - sg_qa_deploy
      - aadev_build:
          requires:
            - aadev_approval
      - aadev_deploy:
          requires:
            - aadev_build
      - aa_approval_to_stag:
          type: approval
          requires:
            - aadev_deploy
      - aastg_build:
          requires:
            - aa_approval_to_stag
      - aastg_deploy:
          requires:
            - aastg_build
      #- aa_approval_to_ppd:
      #    type: approval
      #    requires:
      #      - aastg_deploy
      #- aappd_build:
      #    requires:
      #      - aa_approval_to_ppd
      #- aappd_deploy:
      #    requires:
      #      - aappd_build
      - aa_approval_to_prd:
          type: approval
          requires:
      #      - aappd_deploy
            - aastg_deploy
      - aaprd_build:
          requires:
            - aa_approval_to_prd
      - aaprd_deploy:
          requires:
            - aaprd_build
