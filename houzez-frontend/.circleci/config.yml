version: 2
jobs:
  run_unit_tests:
    working_directory: ~/repo
    docker:
      - image: circleci/node:12
        environment:
          NODE_ENV: test
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - run:
          name: Setup AirAsia Jfrog
          command: |
            echo "@airasia:registry=https://airasia.jfrog.io/artifactory/api/npm/cosmos-npm/" > .npmrc
            curl -u"$JFROG_USERNAME:$JFROG_PASSWORD" https://airasia.jfrog.io/artifactory/api/npm/auth >> .npmrc
      - run:
          name: Install Dependencies
          command: yarn install
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Run tests
          command: echo "by pass for now"
      - store_test_results:
          path: test-results
  pre_build:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build application Docker image
          command: |
            docker build \
              --no-cache -f Dockerfile --build-arg JFROG_USERNAME=$JFROG_USERNAME --build-arg JFROG_PASSWORD=$JFROG_PASSWORD \
              -t app .

  # Build dev environment for Singapore region
  develop_build:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: sudo pip install awscli --upgrade
      - run:
          name: Setup AWS SDK
          command: |
            aws configure set region $AWS_REGION_SG
            $(aws ecr get-login --no-include-email --region $AWS_REGION_SG)
      - run:
          name: Build application Docker image
          command: |
            docker build --no-cache -f Dockerfile -t app --build-arg JFROG_USERNAME=$JFROG_USERNAME --build-arg JFROG_PASSWORD=$JFROG_PASSWORD .
            docker tag app $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION_SG.amazonaws.com/$SERVICE_NAME:dev-$CIRCLE_SHA1
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION_SG.amazonaws.com/$SERVICE_NAME:dev-$CIRCLE_SHA1

  # Deploy dev environment for Singapore region
  deploy_to_dev:
    docker:
      - image: google/cloud-sdk:290.0.0
        environment:
          ENVIRONMENT: dev
          NODE_ENV: develop
          CLUSTER_NAME: diqit-dev
          REPLICAS: 1
          CONTAINER_PORT: 3000
          AWS_REGION: ap-southeast-1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            pip3 install awscli --upgrade
            apt-get install -qq -y gettext
      - run:
          name: Connect to eks dev cluster
          command: aws eks --region $AWS_REGION_SG update-kubeconfig --name $CLUSTER_NAME
      - run:
          name: Deploy to Dev environment
          command: |
            envsubst < .deployment/deployment.dev.yml > output.yml | kubectl apply -f output.yml --record
            kubectl rollout status deployment/${SERVICE_NAME} -n application
      - run:
          name: CloudFront invalidations
          command: aws cloudfront create-invalidation --distribution-id $SG_AWS_CLOUDFRONT_ID_DEV --paths '/*'

  # Build prod environment for Singapore region
  master_build:
    docker:
      - image: circleci/python:2.7-jessie
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: sudo pip install awscli --upgrade
      - run:
          name: Setup AWS SDK
          command: |
            aws configure set region $AWS_REGION_SG
            $(aws ecr get-login --no-include-email --region $AWS_REGION_SG)
      - run:
          name: Build application Docker image
          command: |
            docker build --no-cache -f Dockerfile -t app --build-arg JFROG_USERNAME=$JFROG_USERNAME --build-arg JFROG_PASSWORD=$JFROG_PASSWORD .
            docker tag app $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION_SG.amazonaws.com/$SERVICE_NAME:prod-$CIRCLE_SHA1
            docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION_SG.amazonaws.com/$SERVICE_NAME:prod-$CIRCLE_SHA1

  # Deploy prod environment for Singapore region
  deploy_to_prod:
    docker:
      - image: google/cloud-sdk:290.0.0
        environment:
          ENVIRONMENT: prod
          NODE_ENV: production
          CLUSTER_NAME: diqit-prod
          REPLICAS: 2
          CONTAINER_PORT: 3000
          AWS_REGION: ap-southeast-1
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            pip3 install awscli --upgrade
            apt-get install -qq -y gettext
      - run:
          name: Connect to eks dev cluster
          command: aws eks --region $AWS_REGION_SG update-kubeconfig --name $CLUSTER_NAME
      - run:
          name: Deploy to Prod environment
          command: |
            envsubst < .deployment/deployment.prod.yml > output.yml | kubectl apply -f output.yml --record
            kubectl rollout status deployment/${SERVICE_NAME} -n application
      - run:
          name: CloudFront invalidations
          command: aws cloudfront create-invalidation --distribution-id $SG_AWS_CLOUDFRONT_ID_DEV --paths '/*'

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - run_unit_tests
      - pre_build:
          filters:
            branches:
              ignore:
                - master
                - develop
          requires:
            - run_unit_tests
      - develop_build:
          filters:
            branches:
              only: develop
          requires: 
            - run_unit_tests
      - deploy_to_dev:
          requires:
            - develop_build
      - master_build:
          filters:
            branches:
              only: master
          requires: 
            - run_unit_tests
      - deploy_to_prod:
          requires:
            - master_build